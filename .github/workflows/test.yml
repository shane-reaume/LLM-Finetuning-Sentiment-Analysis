name: Run Tests and Update Badges

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN for this workflow
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Run tests with coverage
        run: |
          mkdir -p reports
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term
          
      - name: Check if model exists
        id: check_model
        run: |
          MODEL_EXISTS=false
          if [ -f "models/sentiment/pytorch_model.bin" ] || [ -f "models/sentiment/model.safetensors" ]; then
            MODEL_EXISTS=true
            echo "Model files found, will run challenge tests"
          else
            echo "Model files not found, skipping challenge tests"
          fi
          echo "MODEL_EXISTS=$MODEL_EXISTS" >> $GITHUB_OUTPUT
          
      - name: Generate challenge test results
        if: steps.check_model.outputs.MODEL_EXISTS == 'true'
        run: |
          python -m src.model.sentiment_challenge_test --model_dir="models/sentiment" --output="reports/challenge_test_results.json"
          
      - name: Calculate challenge test accuracy
        id: challenge_accuracy
        if: steps.check_model.outputs.MODEL_EXISTS == 'true'
        run: |
          ACCURACY=$(python -c "import json; data=json.load(open('reports/challenge_test_results.json')); print(round(data['summary']['accuracy'] * 100))")
          echo "ACCURACY=$ACCURACY" >> $GITHUB_ENV
          echo "Challenge test accuracy: $ACCURACY%"
          
      - name: Set default challenge accuracy (when no model)
        if: steps.check_model.outputs.MODEL_EXISTS != 'true'
        run: |
          echo "ACCURACY=0" >> $GITHUB_ENV
          echo "No challenge tests run, using default accuracy of 0%"
          
      - name: Generate coverage badge
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100))")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"
          
          # Create site directory for GitHub Pages
          mkdir -p _site
          
          # Copy reports to site directory
          mkdir -p _site/reports
          cp -r reports/* _site/reports/ || true
          cp -r htmlcov _site/ || true
          
          # Create coverage badge JSON
          cat > _site/coverage-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "$COVERAGE%",
            "color": "$([ $COVERAGE -ge 80 ] && echo 'brightgreen' || [ $COVERAGE -ge 70 ] && echo 'green' || [ $COVERAGE -ge 60 ] && echo 'yellowgreen' || [ $COVERAGE -ge 50 ] && echo 'yellow' || echo 'red')"
          }
          EOF
          
          # Create challenge tests badge JSON
          cat > _site/challenge-tests-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "challenge tests",
            "message": "$ACCURACY%",
            "color": "$([ $ACCURACY -ge 90 ] && echo 'brightgreen' || [ $ACCURACY -ge 80 ] && echo 'green' || [ $ACCURACY -ge 70 ] && echo 'yellowgreen' || [ $ACCURACY -ge 60 ] && echo 'yellow' || echo 'red')"
          }
          EOF
      
      # Use the actions/deploy-pages action to deploy to GitHub Pages
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
          
      - name: Upload artifacts to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/
            htmlcov/
            coverage.xml 