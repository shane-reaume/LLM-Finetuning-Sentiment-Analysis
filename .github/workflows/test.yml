name: Run Tests and Update Badges

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN for this workflow
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Run tests with coverage
        run: |
          mkdir -p reports
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term
          
      - name: Check if model exists
        id: check_model
        run: |
          MODEL_EXISTS=false
          if [ -f "models/sentiment/pytorch_model.bin" ] || [ -f "models/sentiment/model.safetensors" ]; then
            MODEL_EXISTS=true
            echo "Model files found, will run challenge tests"
          else
            echo "Model files not found, skipping challenge tests"
          fi
          echo "MODEL_EXISTS=$MODEL_EXISTS" >> $GITHUB_OUTPUT
          
      - name: Generate challenge test results
        if: steps.check_model.outputs.MODEL_EXISTS == 'true'
        run: |
          python -m src.model.sentiment_challenge_test --model_dir="models/sentiment" --output="reports/challenge_test_results.json"
          
      - name: Run tests only as verification
        run: |
          # Create site directory for GitHub Pages
          mkdir -p _site
          
          # Copy reports to site directory
          mkdir -p _site/reports
          cp -r reports/* _site/reports/ || true
          cp -r htmlcov _site/ || true
          
          # Copy existing badge files from repository (the source of truth)
          cp challenge-tests-badge.json _site/
          cp coverage-badge.json _site/
          
          # Create .nojekyll file to bypass Jekyll processing
          touch _site/.nojekyll
      
      # Use the actions/deploy-pages action to deploy to GitHub Pages
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
          
      - name: Upload artifacts to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      # Upload test reports as artifacts
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/
            htmlcov/
            coverage.xml
          
      - name: Update coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          # Create or update coverage badge
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          COVERAGE_PCT=$(python -c "print(round(float('${COVERAGE}') * 100, 2))")
          echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${COVERAGE_PCT}%\", \"color\": \"green\"}" > coverage-badge.json
          
          if [ -f "coverage-badge.json" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add coverage-badge.json
            git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi
          
  # Deploy job
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
          
  # Continue with other jobs
  codecov:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false 