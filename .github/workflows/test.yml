name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Download pre-trained model
      run: |
        mkdir -p models/sentiment
        # Use huggingface_hub to download a pre-trained model
        # This is a placeholder - replace with your actual model or a public model
        python -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='distilbert-base-uncased-finetuned-sst-2-english', local_dir='models/sentiment')"
        
    - name: Run unit tests
      run: |
        # Run the main model tests
        pytest tests/test_sentiment_model.py -v
        
        # Run the coverage test to ensure all modules are imported
        pytest tests/test_coverage.py -v
        
    - name: Generate coverage report
      run: |
        # Create a .coveragerc file to ensure all source files are included
        cat > .coveragerc << 'EOF'
        [run]
        source = src
        omit = */venv/*,*/tests/*,*/__pycache__/*
        [report]
        exclude_lines =
            pragma: no cover
            def __repr__
            raise NotImplementedError
            if __name__ == .__main__.:
            pass
            raise ImportError
        EOF
        
        # Run all tests with coverage
        pytest --cov=src --cov-report=xml --cov-report=html tests/
        
        # Check which files are included in coverage
        python -m src.utils.check_coverage --src-dir src --coverage-dir htmlcov
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: false
        
    - name: Run challenge tests
      run: |
        # Create necessary directories
        mkdir -p reports
        
        # Run challenge tests with the downloaded model
        python -m src.model.sentiment_challenge_test --model_dir models/sentiment --output reports/challenge_test_results.json
        
        # If the test fails or doesn't generate a results file, create a minimal valid one
        if [ ! -f "reports/challenge_test_results.json" ]; then
          echo '{
            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "results": [],
            "summary": {
              "total": 0,
              "correct": 0,
              "accuracy": 0
            }
          }' > reports/challenge_test_results.json
          echo "Created fallback challenge test results file"
        fi
        
    - name: Generate badges
      run: |
        # Create gh-pages directory if it doesn't exist
        mkdir -p gh-pages
        # Generate dynamic badges based on test results
        python -m src.utils.generate_badges --results-file reports/challenge_test_results.json --output-dir gh-pages
        # Generate HTML report for challenge tests
        python -m src.utils.generate_challenge_report --results-file reports/challenge_test_results.json --output-dir gh-pages/reports
        
    - name: Prepare GitHub Pages directory
      run: |
        mkdir -p gh-pages
        # Copy coverage report
        cp -r htmlcov gh-pages/coverage
        # Copy challenge test results
        cp -r reports gh-pages/
        # Create a simple index page - using multiple echo commands to avoid YAML syntax issues
        echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Test Reports</title><style>body{font-family:sans-serif;max-width:800px;margin:0 auto;padding:20px}h1{border-bottom:1px solid #eee}a{color:#0366d6}.card{border:1px solid #e1e4e8;border-radius:6px;padding:16px;margin-bottom:16px;background-color:#f6f8fa}</style></head>' > gh-pages/index.html
        echo '<body><h1>LLM-Finetuning-Sentiment-Analysis Test Reports</h1><div class="card"><h2>Code Coverage Report</h2><p>Detailed code coverage information for the project.</p><a href="coverage/index.html">View Coverage Report</a></div>' >> gh-pages/index.html
        echo '<div class="card"><h2>Challenge Test Results</h2><p>Results of running the model against challenging test cases.</p><a href="reports/challenge_test_results.html">View Challenge Test Results</a> (<a href="reports/challenge_test_results.json">JSON</a>)</div>' >> gh-pages/index.html
        echo '<p>These reports are automatically generated by the GitHub Actions workflow. For more information, visit the <a href="https://github.com/shane-reaume/LLM-Finetuning-Sentiment-Analysis">GitHub repository</a>.</p></body></html>' >> gh-pages/index.html
        
    - name: Archive test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: reports/
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: gh-pages
        branch: gh-pages
        
    - name: Verify deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Waiting for GitHub Pages deployment to complete..."
        sleep 10
        
        # Check if the badge file exists in the gh-pages branch
        echo "Checking if badge file exists in gh-pages branch..."
        git fetch origin gh-pages
        git checkout gh-pages
        
        if [ -f "challenge-tests-badge.json" ]; then
          echo "Badge file exists in gh-pages branch"
          cat challenge-tests-badge.json
        else
          echo "Badge file not found in gh-pages branch"
          echo "Creating badge file directly in gh-pages branch..."
          echo '{
            "schemaVersion": 1,
            "label": "challenge tests",
            "message": "manual",
            "color": "blue"
          }' > challenge-tests-badge.json
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add challenge-tests-badge.json
          git commit -m "Add manual badge file"
          git push origin gh-pages
        fi
        
        # Return to main branch
        git checkout main 