name: Run Tests and Update Badges

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Run tests with coverage
        run: |
          mkdir -p reports
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term
          
      - name: Generate challenge test results
        run: |
          python -m src.model.sentiment_evaluate_challenge --model_path="models/sentiment" --output_file="reports/challenge_test_results.json"
          
      - name: Calculate challenge test accuracy
        id: challenge_accuracy
        run: |
          ACCURACY=$(python -c "import json; data=json.load(open('reports/challenge_test_results.json')); print(round(data['accuracy'] * 100))")
          echo "ACCURACY=$ACCURACY" >> $GITHUB_ENV
          echo "Challenge test accuracy: $ACCURACY%"
          
      - name: Generate coverage badge
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100))")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"
          
          # Create coverage badge JSON
          mkdir -p badges
          cat > badges/coverage-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "coverage",
            "message": "$COVERAGE%",
            "color": "$([ $COVERAGE -ge 80 ] && echo 'brightgreen' || [ $COVERAGE -ge 70 ] && echo 'green' || [ $COVERAGE -ge 60 ] && echo 'yellowgreen' || [ $COVERAGE -ge 50 ] && echo 'yellow' || echo 'red')"
          }
          EOF
          
          # Create challenge tests badge JSON
          cat > badges/challenge-tests-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "challenge tests",
            "message": "$ACCURACY%",
            "color": "$([ $ACCURACY -ge 90 ] && echo 'brightgreen' || [ $ACCURACY -ge 80 ] && echo 'green' || [ $ACCURACY -ge 70 ] && echo 'yellowgreen' || [ $ACCURACY -ge 60 ] && echo 'yellow' || echo 'red')"
          }
          EOF
          
      - name: Deploy badges to GitHub Pages
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deploying badges to GitHub Pages..."
          
          # Clone gh-pages branch to a temporary directory
          TEMP_DIR=$(mktemp -d)
          git clone --branch=gh-pages --single-branch --depth=1 https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git ${TEMP_DIR} || mkdir -p ${TEMP_DIR}
          
          # Create gh-pages branch if it doesn't exist
          if [ ! -d "${TEMP_DIR}/.git" ]; then
            cd ${TEMP_DIR}
            git init
            git checkout -b gh-pages
            git remote add origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
            cd -
          fi
          
          # Copy badge files to gh-pages directory
          cp -r badges/* ${TEMP_DIR}/
          
          # Commit and push changes
          cd ${TEMP_DIR}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update badges" || echo "No changes to commit"
          git push -u origin gh-pages
          cd -
          
      - name: Verify deployment
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for GitHub Pages deployment to complete..."
          sleep 10
          
          # Check if badges are accessible
          COVERAGE_BADGE_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/gh-pages/coverage-badge.json"
          CHALLENGE_BADGE_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/gh-pages/challenge-tests-badge.json"
          
          echo "Verifying coverage badge at: $COVERAGE_BADGE_URL"
          curl -s $COVERAGE_BADGE_URL || echo "Coverage badge not found, but continuing..."
          
          echo "Verifying challenge tests badge at: $CHALLENGE_BADGE_URL"
          curl -s $CHALLENGE_BADGE_URL || echo "Challenge tests badge not found, but continuing..."
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/
            htmlcov/
            coverage.xml 