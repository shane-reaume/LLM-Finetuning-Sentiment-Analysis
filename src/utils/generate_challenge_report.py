#!/usr/bin/env python
"""
Script to generate a human-readable HTML report from challenge test results.
"""

import json
import os
import argparse
from pathlib import Path


def generate_html_report(results_file, output_dir):
    """
    Generate an HTML report from challenge test results.
    
    Args:
        results_file: Path to the challenge test results JSON file
        output_dir: Directory to save the HTML report
    """
    try:
        with open(results_file, 'r') as f:
            results = json.load(f)
        
        # Extract overall accuracy from results
        if 'overall_accuracy' in results:
            accuracy = results['overall_accuracy']
        elif 'accuracy' in results:
            accuracy = results['accuracy']
        else:
            # Calculate from individual results if available
            correct = sum(1 for item in results.get('results', []) if item.get('correct', False))
            total = len(results.get('results', []))
            accuracy = correct / total if total > 0 else 0
            
        # Format accuracy as percentage
        accuracy_pct = round(accuracy * 100)
        
        # Determine color based on accuracy
        if accuracy_pct >= 90:
            color = "#28a745"  # green
        elif accuracy_pct >= 80:
            color = "#5cb85c"  # light green
        elif accuracy_pct >= 70:
            color = "#ffc107"  # yellow
        elif accuracy_pct >= 60:
            color = "#fd7e14"  # orange
        else:
            color = "#dc3545"  # red
            
        # Create HTML report
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Challenge Test Results</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2 {{
            border-bottom: 1px solid #eaecef;
            padding-bottom: 10px;
        }}
        .accuracy {{
            font-size: 24px;
            font-weight: bold;
            color: {color};
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th, td {{
            padding: 8px 12px;
            border: 1px solid #e1e4e8;
            text-align: left;
        }}
        th {{
            background-color: #f6f8fa;
        }}
        .correct {{
            color: #28a745;
        }}
        .incorrect {{
            color: #dc3545;
        }}
        .category {{
            font-weight: bold;
        }}
    </style>
</head>
<body>
    <h1>Challenge Test Results</h1>
    
    <div>
        <h2>Overall Accuracy</h2>
        <p class="accuracy">{accuracy_pct}%</p>
    </div>
    
    <div>
        <h2>Test Cases</h2>
        <table>
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Text</th>
                    <th>Expected</th>
                    <th>Predicted</th>
                    <th>Result</th>
                </tr>
            </thead>
            <tbody>
"""
        
        # Add test cases to the table
        for item in results.get('results', []):
            category = item.get('category', 'Unknown')
            text = item.get('text', '')
            expected = item.get('expected', '')
            predicted = item.get('predicted', '')
            correct = item.get('correct', False)
            
            result_class = "correct" if correct else "incorrect"
            result_text = "✓" if correct else "✗"
            
            html += f"""                <tr>
                    <td class="category">{category}</td>
                    <td>{text}</td>
                    <td>{expected}</td>
                    <td>{predicted}</td>
                    <td class="{result_class}">{result_text}</td>
                </tr>
"""
        
        # Close the table and HTML
        html += """            </tbody>
        </table>
    </div>
    
    <p>Generated by the LLM-Finetuning-Sentiment-Analysis test framework.</p>
</body>
</html>"""
        
        # Ensure output directory exists
        os.makedirs(output_dir, exist_ok=True)
        
        # Write HTML to file
        output_file = Path(output_dir) / "challenge_test_results.html"
        with open(output_file, 'w') as f:
            f.write(html)
            
        print(f"HTML report generated at {output_file}")
        
    except Exception as e:
        print(f"Error generating HTML report: {e}")
        # Create a fallback HTML
        html = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Challenge Test Results</title>
</head>
<body>
    <h1>Challenge Test Results</h1>
    <p>Error generating report. Please check the JSON file.</p>
</body>
</html>"""
        
        # Ensure output directory exists
        os.makedirs(output_dir, exist_ok=True)
        
        # Write HTML to file
        output_file = Path(output_dir) / "challenge_test_results.html"
        with open(output_file, 'w') as f:
            f.write(html)


def main():
    parser = argparse.ArgumentParser(description="Generate HTML report from challenge test results")
    parser.add_argument(
        "--results-file",
        default="reports/challenge_test_results.json",
        help="Path to challenge test results JSON file"
    )
    parser.add_argument(
        "--output-dir",
        default="gh-pages/reports",
        help="Directory to save HTML report"
    )
    
    args = parser.parse_args()
    generate_html_report(args.results_file, args.output_dir)


if __name__ == "__main__":
    main() 